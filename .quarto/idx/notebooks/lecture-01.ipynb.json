{"title":"Lecture 01: Programming Basics, Data Structures, and Data Manipulation","markdown":{"yaml":{"title":"Lecture 01: Programming Basics, Data Structures, and Data Manipulation","date":"now","format":{"live-html":{"toc":true,"toc-location":"right","code-fold":true,"code-tools":true,"code-summary":"Code","code-block-name":"Code"}},"pyodide":{"packages":["matplotlib","numpy"]},"execute":{"warning":false}},"headingText":"Variables and types","containsRefs":false,"markdown":"\n\nThis lecture will be, intentionally, a bit of a whirlwind. That's because with the advent of large language models (LLMs) like ChatGPT, Claude, Gemini, etc. knowing how to program in specific languages like Python is becoming less important. You don't need that much practice or to focus on the syntax of a specific language. \n\nInstead, the important thing is to understand the core concepts involved in programming, which are largely universal across languages. This high-level understanding will allow you to use LLMs effectively to write code in any language, including Python. If you don't understand the concepts, you won't be able to identify when the LLM is making mistakes or producing suboptimal code.\n\n\nVariables are used to store data in a program. They can hold different types of data, such as numbers, strings (text), lists, and more. \n\n:::{.callout-note title=\"Functions act on variables\"}\nFunctions in programming are designed to operate on variables. They take input (variables), perform some operations, and return output. Understanding how variables work is crucial for effectively using functions.\n\nWe'll explore functions in more detail later ([Functions](#functions-and-functional-programming)), but for now, remember that functions are named blocks of code that manipulate variables to achieve specific tasks.\n\nSome functions are built-in, meaning they are provided by the programming language itself, while others can be defined by the user. Built-in functions in Python include `print()` for displaying output, as well as `type()` for checking the type of a variable.\n:::\n\nIt is both useful and pretty accurate to think of programmatic variables in the same way you think of algebraic variables in math. You can assign or change the value of a variable, and you can use it in calculations or operations.\n\nYou can create a variable by assigning it a value using the equals sign (`=`). \n\nFor example, if you create a variable `x` that holds the value `5`, you can use it in calculations like this:\n\n```python\nx = 5\ny = x + 3\nprint(y)  # Output: 8\n```\n\nThe following table describes some common variable types:\n\n| Variable Type | Description |\n|---------------|-------------|\n| Integer       | Whole numbers, e.g., `5`, `-3`, `42` |\n| Float         | Decimal numbers, e.g., `3.14`, `-0.001`, `2.0` |\n| String        | Textual data, e.g., `\"Hello, world!\"`, `'Python'` |\n| List         | Ordered collection of items, e.g., `[1, 2, 3]`, `['a', 'b', 'c']` |\n| Dictionary    | Key-value pairs, e.g., `{'name': 'Alice', 'age': 30}` |\n| Boolean       | True or False values, e.g., `True`, `False` |\n\nLet's discuss a few important ones in more detail\n\n::: {.callout-note title=\"Everything is an object\"}\nIn Python, everything is an object. This means that even basic data types like integers and strings are treated as objects with methods and properties. For example, you can call methods on a string object to manipulate it, like `my_string.upper()` to convert it to uppercase.\n\nSee the later section on [Object-Oriented Programming](#object-oriented-programming) for more details.\n:::\n\n## Lists\nWe often need to store multiple values together. The most basic way to achieve this is with a list. A list is an ordered collection of items that can be of any type, including other lists. \"Ordered\" means that the items have a specific sequence, and you can access them by their position (index) in the list.\n\nIn Python, you can create a list using square brackets `[]`. For example:\n\nYou can access items in a list using their index (a number specifying their position). In Python, **indexing starts at 0**, so `my_list[0]` refers to the first item in the list.\n\nIndexing also works with negative numbers, which count from the end of the list. For example, `my_list[-1]` refers to the last item in the list.\n\nThe syntax for retrieving indexes is `my_list[start:end:step]`, where `start` is the index to start from, `end` is the index to stop before, and `step` is the interval between items. If you omit `start`, it defaults to 0; if you omit `end`, it defaults to the end of the list; and if you omit `step`, it defaults to 1.\n\n\n\nYou can also modify lists by adding or removing items. For example:\n\n## Arrays (NumPy)\nWhile lists are flexible, they can be inefficient and unreliable for many numerical operations. Arrays, provided by the core library `numpy`, enforce a single data type and are optimized for numerical computations. They also have lots of built-in functionality for mathematical operations. \n\n:::{.callout-note title=\"Packages\" collapse=\"true\"}\nThere is only so much functionality that can be included in a core programming language. To keep the language simple, many advanced features are provided through external packages.  \n\nPackages are collections of pre-written code that you can import into your program to use their features. When you want to use a package, you typically import it at the beginning of your script. For example, to use NumPy, you would write:\n\n```python\nimport numpy as np\n```\n`np` is now what we call an alias, a shorthand for referring to the NumPy package. \n\nNow any time you want to use a function (we'll discuss functions in detail later) from NumPy, you can do so by prefixing it with `np.`. For example, we'll see how to create a NumPy array below using `np.array()`.\n\n:::\n\nYou can create a NumPy array using the `numpy.array()` command. For example:\n\n\n\nYou can perform mathematical operations on NumPy arrays, and they will be applied element-wise. For example:\n\n\n\nYou can't have mixed data types in a NumPy array, so if you try to create an array with both numbers and strings, it will convert everything to strings:\n\n### Advanced indexing\nNumPy arrays support complex indexing, allowing you to access and manipulate specific elements or subarrays efficiently.\n\nYou can actually use arrays to index other arrays, which is a powerful feature. This allows you to select specific elements based on conditions or patterns. \n\n\n\nOne important feature is boolean indexing, where you can use a boolean array to select elements from another array. This lets you filter data based on conditions. For example:\n\n## Dictionaries\n\nSometimes a list or array is not enough. You may want to store data in a way that allows you to access it by a keyword rather than by an index. For example, I might have a list of people and their ages, but I want to be able to look up a person's age by their name. In this case, I can use a dictionary.\n\nWe can create a dictionary using curly braces `{}` and separating keys and values with a colon `:`. Here's an example:\n\n\nIn order to access a value in a dictionary, we use the key in square brackets `[]`. Here's how you can do that:\n\nThe \"value\" in a dictionary can be of any type, including another dictionary or a list. This allows for building up complex data structures that contain named entities and their associated data.\n\nFor example, you might have a dictionary that contains different types of data about a person.\n\n## Dataframes\n\nMost of the time, data scientists work with *tabular data* (data organized in tables with rows and columns). \nThink of the data you typically see in spreadsheets -- rows represent individual records, and columns represent attributes of those records.\n\nIn Python, the most common way to work with tabular data is through the `pandas` library, which provides a powerful data structure called a DataFrame.\n\nOne import thing to realize about DataFrames that each column can have a different data type. For example, one column might contain integers, another might contain strings, and yet another might contain floating-point numbers.\n\nHowever, all the values in a single column *should* be of the same type. Intuitively: since columns represent attributes, every value in a column should represent the same kind of information. It wouldn't make sense if the \"city\" column of a DataFrame contained both \"New York\" (a string) and 42 (an integer).\n\nNote that this rule isn't necessarily enforced by the DataFrame structure itself, but it's a good practice to follow. Otherwise, you might run into issues when performing operations on the DataFrame.\n\n\n## Conditional logic\n\nConditional logic allows you to make decisions in your code based on certain conditions. This is essential for controlling the flow of your program and executing different actions based on different situations.\n\n### If-elif-else statements\nThe most common way to implement conditional logic is through `if`, `elif`, and `else` statements:\n\n| Statement Type | Description |\n|----------------|-------------|\n| `if`           | Checks a condition and executes the block if it's true. |\n| `elif`         | Checks another condition if the previous `if` or `elif` was false. |\n| `else`         | Executes a block if all previous conditions were false. |\n\nHere's an example of how to use these statements. Play around with the code below to see how it works. You can change the value of `age` to see how the output changes based on different conditions.\n\n```{pyodide}\nage = #TODO: Set your age here\nif age < 18:\n    print(\"You are a minor.\")\nelif age < 65:\n    print(\"You are an adult.\")\nelif age >= 120:\n    print(\"You've done your time, haven't you?\")\nelse:\n    print(\"You are a senior citizen.\")\n```\n\nNote that the `elif` and `else` statements are optional. You can have just an `if` statement, which will execute a block of code if the condition is true and skip it if the condition is false.\n\n::: {.callout-tip  title=\"Boolean expressions\" collapse=\"true\"}\nBoolean expressions are conditions that evaluate to either `True` or `False`. They are often used in `if` statements to control the flow of the program. Common operators for creating Boolean expressions include:\n\n| Operator | Description |\n|----------|-------------|\n| `==`     | Equal to    |\n| `!=`     | Not equal to|\n| `<`      | Less than   |\n| `<=`     | Less than or equal to |\n| `>`      | Greater than |\n| `>=`     | Greater than or equal to |\n| `and` , `&`   | Logical AND  |\n| `or`, `|`     | Logical OR   |\n| `not` , `~`   | Logical NOT  |\n\n:::\n\n## Loops\n\nLoops are special constructs that allow you to repeat a block of code multiple times in sequence. They are useful when you want to perform the same operation on multiple items, such as iterating over a list or processing each row in a DataFrame.\n\nThe two most common types of loops are `for` loops and `while` loops.\n\n### For Loops\nA `for` loop iterates over a sequence (like a list or a string) and executes a block of code for each item in that sequence. Here's an example:\n```python\nmy_list = [1, 2, 3, 4, 5]\nfor item in my_list:\n    print(item)\n```\nThis will print each item in `my_list` one by one.\n\n:::{.callout-note title=\"Useful Python functions: range() and enumerate()\"}\nIn Python, the `range()` function generates a sequence of numbers, which is often used in `for` loops. For example, `range(5)` generates the numbers 0 to 4.\nThe `enumerate()` function is useful when you need both the index and the value of items in a list. It returns pairs of (index, value) for each item in the list. For example:\n```python\nmy_list = ['a', 'b', 'c']\nfor index, value in enumerate(my_list):\n    print(f\"Index: {index}, Value: {value}\")\n```\n:::\n\n### While Loops\nA `while` loop continues to execute a block of code as long as a specified condition is true. Here's an example:\n```python\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1 # Increment the count\n```\nThis will print the numbers 0 to 4, incrementing `count` by 1 each time until the condition `count < 5` is no longer true.\n\n## Functions and functional programming\n\nFunctions are reusable blocks of code that perform a specific task. They allow you to organize your code into logical sections, making it easier to read, maintain, and reuse.\n\nThey work like functions in math: you can pass inputs (arguments) to a function, and it will return an output (result).\nYou can define a function in Python using the `def` keyword, followed by the function name and parentheses containing any parameters. Here's an example:\n\n```python\ndef add_numbers(a, b):\n    \"\"\"Adds two numbers and returns the result.\"\"\"\n    return a + b\nresult = add_numbers(3, 5)\nprint(result)  # Output: 8\n```\nFunctions can also have default values for parameters, which allows you to call them with fewer arguments than defined. For example:\n\n```python\ndef greet(name=\"World\"):\n    \"\"\"Greets the specified name or 'World' by default.\"\"\"\n    return f\"Hello, {name}!\"\nprint(greet())          # Output: Hello, World!\nprint(greet(\"Alice\"))  # Output: Hello, Alice!\n```\n\n**Functional programming** is a style of programming that treats computer programs as the evaluation of mathematical functions. It is alternatively called **value-oriented programming**[^1] because the output of a program is just the value(s) it produces as a function of its inputs.\n\n[^1]: Technically there is a difference between functional programming and value-oriented programming that programming-language nerds care about, but for our purposes, they are the same thing.\n\nProbably the core principle of functional programming is to avoid changing state and mutable data. This means that once a value is created, it should not be changed. Instead, you create new values based on existing ones.\n\nThat means means that functions should not have side effects -- they use data passed to them and return a new value without modifying the input data. This makes it easier to reason about code, as you can understand what a function does just by looking at its inputs and outputs.\n\nFor example, consider the following two functions for squaring a number:\n\nThere are somewhat complicated rules about what objects can be modified in place and what cannot (sometimes Python allows it, sometimes it doesn't), but the general rule is that you should avoid modifying objects in place unless you have a good reason to do so. The main reason is that you might inadvertently change the value of an object that is being used elsewhere in your code, leading to bugs that are hard to track down. Instead, create new objects based on existing ones.\n\n## Object-Oriented Programming\n\nWhile you can write programs in Python using just functions, the language is really designed for object-oriented programming (OOP). \nOOP is a style of programming built around the concept of \"objects\", which are specific instances of classes.\n\nA class is like a template for creating new objects. It defines the properties (attributes) and \\\\\nbehaviors (methods) that the objects created from the class will have.\n\nTo define a class in Python, you use the `class` keyword followed by the class name. \nEvery class should have an `__init__` method, which is a special method that initializes the object when it is created.\n\nHere's a simple example of a class:\n\nObject-oriented programming has a number of advantages, but many of them are really just about organizing code in a way that makes it easier to understand, reuse, and maintain. \n\nOne of the key features of OOP is **inheritance**, which allows you to create new classes based on existing ones. This means you can define a base class with common attributes and methods, and then create subclasses that inherit from it and add or override functionality.\n\nFor example, you might inherit from the base class `Date` to create a subclass `HolidayDate` that adds specific attributes or methods related to holidays:\n\n```{pyodide}\n#| setup: true\n#| exercise: holiday_date\nclass Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    def __str__(self):\n        return f\"{self.year}-{self.month:02d}-{self.day:02d}\"\n```\n\n```{pyodide}\n#| exercise: holiday_date\nclass HolidayDate(Date):\n    def __init__(self, year, month, day, holiday_name):\n        super().__init__(year, month, day)\n        # TODO: Add a new attribute for the holiday name\n\n    def print_holiday(self):\n        # TODO: Print the date and the holiday name\n\nchannukah = HolidayDate(2025, 12, 7, \"Channukah\")\nprint(channukah)  # Output: 2025-12-07\nchannukah.print_holiday()  # Output: Channukah is on 2025-12-07.\n\n```\n\n\n::: {.solution exercise=holiday_date}\n```{python}\nclass HolidayDate(Date):\n    def __init__(self, year, month, day, holiday_name):\n        super().__init__(year, month, day)\n        self.holiday_name = holiday_name\n\n    def print_holiday(self):\n        print(f\"{self.holiday_name} is on {self}.\")\n```\n:::\n\n\nThis allows you to create specialized versions of a class without duplicating code, making your codebase cleaner and easier to maintain.\n\nFor the purposes of statistics and data science, classes are mostly useful because they allow you to create custom data structures that can hold both data and methods for manipulating that data. We have already seen this in the context of DataFrames -- the `pandas` library defines a DataFrame class that has methods for manipulating tabular data. By defining and using DataFrame objects, you get access to a wide range of functionality for working with data without having to implement it yourself. For example, you can filter rows, group data, and perform aggregations (like `mean`, `sum`, etc.) using methods defined in the DataFrame class.\n\n## Summary\nIn this lecture we covered some of the core programming concepts that are important to understand when working with Python or any other programming language. In today's assignment, you will practice these concepts by writing Python code to solve some problems.\n","srcMarkdownNoYaml":"\n\nThis lecture will be, intentionally, a bit of a whirlwind. That's because with the advent of large language models (LLMs) like ChatGPT, Claude, Gemini, etc. knowing how to program in specific languages like Python is becoming less important. You don't need that much practice or to focus on the syntax of a specific language. \n\nInstead, the important thing is to understand the core concepts involved in programming, which are largely universal across languages. This high-level understanding will allow you to use LLMs effectively to write code in any language, including Python. If you don't understand the concepts, you won't be able to identify when the LLM is making mistakes or producing suboptimal code.\n\n## Variables and types\n\nVariables are used to store data in a program. They can hold different types of data, such as numbers, strings (text), lists, and more. \n\n:::{.callout-note title=\"Functions act on variables\"}\nFunctions in programming are designed to operate on variables. They take input (variables), perform some operations, and return output. Understanding how variables work is crucial for effectively using functions.\n\nWe'll explore functions in more detail later ([Functions](#functions-and-functional-programming)), but for now, remember that functions are named blocks of code that manipulate variables to achieve specific tasks.\n\nSome functions are built-in, meaning they are provided by the programming language itself, while others can be defined by the user. Built-in functions in Python include `print()` for displaying output, as well as `type()` for checking the type of a variable.\n:::\n\nIt is both useful and pretty accurate to think of programmatic variables in the same way you think of algebraic variables in math. You can assign or change the value of a variable, and you can use it in calculations or operations.\n\nYou can create a variable by assigning it a value using the equals sign (`=`). \n\nFor example, if you create a variable `x` that holds the value `5`, you can use it in calculations like this:\n\n```python\nx = 5\ny = x + 3\nprint(y)  # Output: 8\n```\n\nThe following table describes some common variable types:\n\n| Variable Type | Description |\n|---------------|-------------|\n| Integer       | Whole numbers, e.g., `5`, `-3`, `42` |\n| Float         | Decimal numbers, e.g., `3.14`, `-0.001`, `2.0` |\n| String        | Textual data, e.g., `\"Hello, world!\"`, `'Python'` |\n| List         | Ordered collection of items, e.g., `[1, 2, 3]`, `['a', 'b', 'c']` |\n| Dictionary    | Key-value pairs, e.g., `{'name': 'Alice', 'age': 30}` |\n| Boolean       | True or False values, e.g., `True`, `False` |\n\nLet's discuss a few important ones in more detail\n\n::: {.callout-note title=\"Everything is an object\"}\nIn Python, everything is an object. This means that even basic data types like integers and strings are treated as objects with methods and properties. For example, you can call methods on a string object to manipulate it, like `my_string.upper()` to convert it to uppercase.\n\nSee the later section on [Object-Oriented Programming](#object-oriented-programming) for more details.\n:::\n\n## Lists\nWe often need to store multiple values together. The most basic way to achieve this is with a list. A list is an ordered collection of items that can be of any type, including other lists. \"Ordered\" means that the items have a specific sequence, and you can access them by their position (index) in the list.\n\nIn Python, you can create a list using square brackets `[]`. For example:\n\nYou can access items in a list using their index (a number specifying their position). In Python, **indexing starts at 0**, so `my_list[0]` refers to the first item in the list.\n\nIndexing also works with negative numbers, which count from the end of the list. For example, `my_list[-1]` refers to the last item in the list.\n\nThe syntax for retrieving indexes is `my_list[start:end:step]`, where `start` is the index to start from, `end` is the index to stop before, and `step` is the interval between items. If you omit `start`, it defaults to 0; if you omit `end`, it defaults to the end of the list; and if you omit `step`, it defaults to 1.\n\n\n\nYou can also modify lists by adding or removing items. For example:\n\n## Arrays (NumPy)\nWhile lists are flexible, they can be inefficient and unreliable for many numerical operations. Arrays, provided by the core library `numpy`, enforce a single data type and are optimized for numerical computations. They also have lots of built-in functionality for mathematical operations. \n\n:::{.callout-note title=\"Packages\" collapse=\"true\"}\nThere is only so much functionality that can be included in a core programming language. To keep the language simple, many advanced features are provided through external packages.  \n\nPackages are collections of pre-written code that you can import into your program to use their features. When you want to use a package, you typically import it at the beginning of your script. For example, to use NumPy, you would write:\n\n```python\nimport numpy as np\n```\n`np` is now what we call an alias, a shorthand for referring to the NumPy package. \n\nNow any time you want to use a function (we'll discuss functions in detail later) from NumPy, you can do so by prefixing it with `np.`. For example, we'll see how to create a NumPy array below using `np.array()`.\n\n:::\n\nYou can create a NumPy array using the `numpy.array()` command. For example:\n\n\n\nYou can perform mathematical operations on NumPy arrays, and they will be applied element-wise. For example:\n\n\n\nYou can't have mixed data types in a NumPy array, so if you try to create an array with both numbers and strings, it will convert everything to strings:\n\n### Advanced indexing\nNumPy arrays support complex indexing, allowing you to access and manipulate specific elements or subarrays efficiently.\n\nYou can actually use arrays to index other arrays, which is a powerful feature. This allows you to select specific elements based on conditions or patterns. \n\n\n\nOne important feature is boolean indexing, where you can use a boolean array to select elements from another array. This lets you filter data based on conditions. For example:\n\n## Dictionaries\n\nSometimes a list or array is not enough. You may want to store data in a way that allows you to access it by a keyword rather than by an index. For example, I might have a list of people and their ages, but I want to be able to look up a person's age by their name. In this case, I can use a dictionary.\n\nWe can create a dictionary using curly braces `{}` and separating keys and values with a colon `:`. Here's an example:\n\n\nIn order to access a value in a dictionary, we use the key in square brackets `[]`. Here's how you can do that:\n\nThe \"value\" in a dictionary can be of any type, including another dictionary or a list. This allows for building up complex data structures that contain named entities and their associated data.\n\nFor example, you might have a dictionary that contains different types of data about a person.\n\n## Dataframes\n\nMost of the time, data scientists work with *tabular data* (data organized in tables with rows and columns). \nThink of the data you typically see in spreadsheets -- rows represent individual records, and columns represent attributes of those records.\n\nIn Python, the most common way to work with tabular data is through the `pandas` library, which provides a powerful data structure called a DataFrame.\n\nOne import thing to realize about DataFrames that each column can have a different data type. For example, one column might contain integers, another might contain strings, and yet another might contain floating-point numbers.\n\nHowever, all the values in a single column *should* be of the same type. Intuitively: since columns represent attributes, every value in a column should represent the same kind of information. It wouldn't make sense if the \"city\" column of a DataFrame contained both \"New York\" (a string) and 42 (an integer).\n\nNote that this rule isn't necessarily enforced by the DataFrame structure itself, but it's a good practice to follow. Otherwise, you might run into issues when performing operations on the DataFrame.\n\n\n## Conditional logic\n\nConditional logic allows you to make decisions in your code based on certain conditions. This is essential for controlling the flow of your program and executing different actions based on different situations.\n\n### If-elif-else statements\nThe most common way to implement conditional logic is through `if`, `elif`, and `else` statements:\n\n| Statement Type | Description |\n|----------------|-------------|\n| `if`           | Checks a condition and executes the block if it's true. |\n| `elif`         | Checks another condition if the previous `if` or `elif` was false. |\n| `else`         | Executes a block if all previous conditions were false. |\n\nHere's an example of how to use these statements. Play around with the code below to see how it works. You can change the value of `age` to see how the output changes based on different conditions.\n\n```{pyodide}\nage = #TODO: Set your age here\nif age < 18:\n    print(\"You are a minor.\")\nelif age < 65:\n    print(\"You are an adult.\")\nelif age >= 120:\n    print(\"You've done your time, haven't you?\")\nelse:\n    print(\"You are a senior citizen.\")\n```\n\nNote that the `elif` and `else` statements are optional. You can have just an `if` statement, which will execute a block of code if the condition is true and skip it if the condition is false.\n\n::: {.callout-tip  title=\"Boolean expressions\" collapse=\"true\"}\nBoolean expressions are conditions that evaluate to either `True` or `False`. They are often used in `if` statements to control the flow of the program. Common operators for creating Boolean expressions include:\n\n| Operator | Description |\n|----------|-------------|\n| `==`     | Equal to    |\n| `!=`     | Not equal to|\n| `<`      | Less than   |\n| `<=`     | Less than or equal to |\n| `>`      | Greater than |\n| `>=`     | Greater than or equal to |\n| `and` , `&`   | Logical AND  |\n| `or`, `|`     | Logical OR   |\n| `not` , `~`   | Logical NOT  |\n\n:::\n\n## Loops\n\nLoops are special constructs that allow you to repeat a block of code multiple times in sequence. They are useful when you want to perform the same operation on multiple items, such as iterating over a list or processing each row in a DataFrame.\n\nThe two most common types of loops are `for` loops and `while` loops.\n\n### For Loops\nA `for` loop iterates over a sequence (like a list or a string) and executes a block of code for each item in that sequence. Here's an example:\n```python\nmy_list = [1, 2, 3, 4, 5]\nfor item in my_list:\n    print(item)\n```\nThis will print each item in `my_list` one by one.\n\n:::{.callout-note title=\"Useful Python functions: range() and enumerate()\"}\nIn Python, the `range()` function generates a sequence of numbers, which is often used in `for` loops. For example, `range(5)` generates the numbers 0 to 4.\nThe `enumerate()` function is useful when you need both the index and the value of items in a list. It returns pairs of (index, value) for each item in the list. For example:\n```python\nmy_list = ['a', 'b', 'c']\nfor index, value in enumerate(my_list):\n    print(f\"Index: {index}, Value: {value}\")\n```\n:::\n\n### While Loops\nA `while` loop continues to execute a block of code as long as a specified condition is true. Here's an example:\n```python\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1 # Increment the count\n```\nThis will print the numbers 0 to 4, incrementing `count` by 1 each time until the condition `count < 5` is no longer true.\n\n## Functions and functional programming\n\nFunctions are reusable blocks of code that perform a specific task. They allow you to organize your code into logical sections, making it easier to read, maintain, and reuse.\n\nThey work like functions in math: you can pass inputs (arguments) to a function, and it will return an output (result).\nYou can define a function in Python using the `def` keyword, followed by the function name and parentheses containing any parameters. Here's an example:\n\n```python\ndef add_numbers(a, b):\n    \"\"\"Adds two numbers and returns the result.\"\"\"\n    return a + b\nresult = add_numbers(3, 5)\nprint(result)  # Output: 8\n```\nFunctions can also have default values for parameters, which allows you to call them with fewer arguments than defined. For example:\n\n```python\ndef greet(name=\"World\"):\n    \"\"\"Greets the specified name or 'World' by default.\"\"\"\n    return f\"Hello, {name}!\"\nprint(greet())          # Output: Hello, World!\nprint(greet(\"Alice\"))  # Output: Hello, Alice!\n```\n\n**Functional programming** is a style of programming that treats computer programs as the evaluation of mathematical functions. It is alternatively called **value-oriented programming**[^1] because the output of a program is just the value(s) it produces as a function of its inputs.\n\n[^1]: Technically there is a difference between functional programming and value-oriented programming that programming-language nerds care about, but for our purposes, they are the same thing.\n\nProbably the core principle of functional programming is to avoid changing state and mutable data. This means that once a value is created, it should not be changed. Instead, you create new values based on existing ones.\n\nThat means means that functions should not have side effects -- they use data passed to them and return a new value without modifying the input data. This makes it easier to reason about code, as you can understand what a function does just by looking at its inputs and outputs.\n\nFor example, consider the following two functions for squaring a number:\n\nThere are somewhat complicated rules about what objects can be modified in place and what cannot (sometimes Python allows it, sometimes it doesn't), but the general rule is that you should avoid modifying objects in place unless you have a good reason to do so. The main reason is that you might inadvertently change the value of an object that is being used elsewhere in your code, leading to bugs that are hard to track down. Instead, create new objects based on existing ones.\n\n## Object-Oriented Programming\n\nWhile you can write programs in Python using just functions, the language is really designed for object-oriented programming (OOP). \nOOP is a style of programming built around the concept of \"objects\", which are specific instances of classes.\n\nA class is like a template for creating new objects. It defines the properties (attributes) and \\\\\nbehaviors (methods) that the objects created from the class will have.\n\nTo define a class in Python, you use the `class` keyword followed by the class name. \nEvery class should have an `__init__` method, which is a special method that initializes the object when it is created.\n\nHere's a simple example of a class:\n\nObject-oriented programming has a number of advantages, but many of them are really just about organizing code in a way that makes it easier to understand, reuse, and maintain. \n\nOne of the key features of OOP is **inheritance**, which allows you to create new classes based on existing ones. This means you can define a base class with common attributes and methods, and then create subclasses that inherit from it and add or override functionality.\n\nFor example, you might inherit from the base class `Date` to create a subclass `HolidayDate` that adds specific attributes or methods related to holidays:\n\n```{pyodide}\n#| setup: true\n#| exercise: holiday_date\nclass Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    def __str__(self):\n        return f\"{self.year}-{self.month:02d}-{self.day:02d}\"\n```\n\n```{pyodide}\n#| exercise: holiday_date\nclass HolidayDate(Date):\n    def __init__(self, year, month, day, holiday_name):\n        super().__init__(year, month, day)\n        # TODO: Add a new attribute for the holiday name\n\n    def print_holiday(self):\n        # TODO: Print the date and the holiday name\n\nchannukah = HolidayDate(2025, 12, 7, \"Channukah\")\nprint(channukah)  # Output: 2025-12-07\nchannukah.print_holiday()  # Output: Channukah is on 2025-12-07.\n\n```\n\n\n::: {.solution exercise=holiday_date}\n```{python}\nclass HolidayDate(Date):\n    def __init__(self, year, month, day, holiday_name):\n        super().__init__(year, month, day)\n        self.holiday_name = holiday_name\n\n    def print_holiday(self):\n        print(f\"{self.holiday_name} is on {self}.\")\n```\n:::\n\n\nThis allows you to create specialized versions of a class without duplicating code, making your codebase cleaner and easier to maintain.\n\nFor the purposes of statistics and data science, classes are mostly useful because they allow you to create custom data structures that can hold both data and methods for manipulating that data. We have already seen this in the context of DataFrames -- the `pandas` library defines a DataFrame class that has methods for manipulating tabular data. By defining and using DataFrame objects, you get access to a wide range of functionality for working with data without having to implement it yourself. For example, you can filter rows, group data, and perform aggregations (like `mean`, `sum`, etc.) using methods defined in the DataFrame class.\n\n## Summary\nIn this lecture we covered some of the core programming concepts that are important to understand when working with Python or any other programming language. In today's assignment, you will practice these concepts by writing Python code to solve some problems.\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/jrudoler/Documents/teaching/understanding-uncertainty/_extensions/r-wasm/live/live.lua"],"toc":true,"output-file":"lecture-01.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"theme":{"light":"flatly","dark":"darkly"},"title":"Lecture 01: Programming Basics, Data Structures, and Data Manipulation","date":"now","pyodide":{"packages":["matplotlib","numpy"]},"toc-location":"right","code-summary":"Code","code-block-name":"Code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}